@use "../theme" as *;

/*
 *  Spacing and positioning classes
 */

.max-content {
  max-width: var(--max-content-width);
}

.contents {
  display: contents;
}

.gap,
.grid-gap,
.flex-gap {
  gap: var(--padding);
}

.between,
.flex-between,
.grid-between {
  justify-content: space-between;
}

.centered,
.flex-centered,
.grid-centered {
  place-content: center;
}

.child-center > * {
  justify-self: center;
}

/*
 *  Flexbox classes
 */

[class*="flex"] {
  display: flex;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-columns {
  --target-width: #{$max-content-width};
  > * {
    max-width: 100%;
    flex-grow: 1;
    flex-basis: calc((var(--target-width) - 100%) * 999);
  }
}

.flex-pancake {
  > * {
    flex: 1 1 var(--flex-column-width);
  }
}

@for $cols from 2 through 4 {
  .grow-#{$cols} {
    flex-grow: $cols;
  }
}

/*
 *  Grid classes
 */

[class*="grid"] {
  display: grid;
}

.grid-even-columns {
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(100%, var(--grid-column-width)), 1fr)
  );
}

.grid-auto-columns {
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
}

.grid-stack {
  grid-template-areas: "stack";
  > * {
    grid-area: stack;
  }
}

.grid-container {
  grid-template-columns:
    minmax(var(--padding), 1fr) //gutter
    min(var(--max-content-width), (100% - (2 * var(--padding))))
    minmax(var(--padding), 1fr); //gutter

  > * {
    grid-column: 2;
  }

  .full-width {
    width: 100%;
    grid-column: 1 / -1;
  }
}

.grid-container-offset-left {
  grid-template-columns:
    minmax(var(--padding), 2fr) //gutter
    min(var(--max-content-width), (100% - (2 * var(--padding))))
    minmax(var(--padding), 1fr); //gutter

  > * {
    grid-column: 2;
  }

  .full-width {
    width: 100%;
    grid-column: 1 / -1;
  }
}

$grid-columns-set: (2, 3, 4, 6, 8);

:root {
  @each $cols in $grid-columns-set {
    --grid-#{$cols}-columns: 1;
  }
  --grid-span: 0;

  @media only screen and (min-width: $breakpoint-desktop) {
    @each $cols in $grid-columns-set {
      --grid-#{$cols}-columns: #{$cols};
    }
    --grid-span: 1;
  }
}

@each $cols in $grid-columns-set {
  .grid-#{$cols}-columns {
    grid-template-columns: repeat(var(--grid-#{$cols}-columns), 1fr);
  }
}

@each $cols in $grid-columns-set {
  .span-#{$cols} {
    grid-column: span calc($cols * var(--grid-span));
  }
}

